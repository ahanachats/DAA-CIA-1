Kruskal’s algorithm to find the minimum cost spanning tree uses the greedy approach.
It is used to find the minimum spanning tree for a connected weighted graph.

It is checked, in each step, that if the edges form a cycle with the spanning-tree formed so far. 
But Kruskal’s fails to detect the cycles in a directed graph as there are cases when there is 
no cycle between the vertices but the algorithm assumes it to cycle and don’t take consider some 
edges due to which, it fails for directed graph.

The algorithm is as follows:

1. Sort all the edges in non-decreasing order of their weight. 
2. Pick the smallest edge. Check if it forms a cycle with the spanning tree formed so far. If the cycle is not formed, include this edge. Else, discard it. 
3. Repeat step 2 until there are (V-1) edges in the spanning tree.


Code in C:

#include<stdio.h>
#include<stdlib.h>
int i,j,k,a,b,u,v,n,ne=1;
int min,mincost=0,cost[9][9],parent[9];
int find(int);
int uni(int,int);
void main()
{
  printf("\n\tImplementation of Kruskal's algorithm\n");
  printf("\nEnter the no. of vertices:");
  scanf("%d",&n);
  printf("\nEnter the cost adjacency matrix:\n");
  for(i=1;i<=n;i++)
  {
  for(j=1;j<=n;j++)
  {
  scanf("%d",&cost[i][j]);
  if(cost[i][j]==0)
  cost[i][j]=999;
  }
  }
  printf("The edges of Minimum Cost Spanning Tree are\n");
  while(ne < n)
  {
  for(i=1,min=999;i<=n;i++)
  {
  for(j=1;j <= n;j++)
  {
  if(cost[i][j] < min)
  {
  min=cost[i][j];
  a=u=i;
  b=v=j;
  }
  }
  }
  u=find(u);
  v=find(v);
  if(uni(u,v))
  {
  printf("%d edge (%d,%d) =%d\n",ne++,a,b,min);
  mincost +=min;
  }
  cost[a][b]=cost[b][a]=999;
  }
  printf("\n\tMinimum cost = %d\n",mincost);
  }
  int find(int i)
  {
  while(parent[i])
  i=parent[i];
  return i;
  }
  int uni(int i,int j)
  {
  if(i!=j)
  {
  parent[j]=i;
  return 1;
  }
return 0;
}
